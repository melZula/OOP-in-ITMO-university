   Все работы должны обрабатывать исключительные ситуации! Причем не бездумно везде try/catch писать, а обрабатывать, по возможности, другими механизмами (использовать TryParse при считывании с консоли, проверять существование перед обращением, логические ошибки аккуратно обрабатывать и т.д.). Try/catch тоже можно, но там, где это оправдано.
Лабораторная 1
1. Прочитать из файла input.txt набор чисел и вывести в файл output.txt их сумму. Примечание: удобно использовать StreamReader и StreamWriter для работы с файлами.
2. Вывести первые n чисел Фибоначчи на консоль. На вход программе в качестве единственного аргумента передается число n - количество чисел Фибоначчи.
3. Сделать преобразователь из римской системы счисления в десятичную. На вход программе в качестве единственного аргумента передается строка - число в римской системе счисления. Необходимо вывести на консоль соответствующее число в десятичной системе счисления.
Пример: 
III = 3
IV = 4
MMXIX = 2019


Лабораторная 2
Определить класс "Рациональная дробь" в виде пары чисел m и n
* Определить класс "Набор дробей". Должна быть возможность добавлять дробь в набор, и набор должен уметь выдавать следующую статистику:
   * максимальную дробь в наборе
   * минимальную дробь в наборе
   * количество дробей в наборе больше заданной
   * количество дробей в наборе меньше заданной
Плюсом будут следующие возможности:
   * кеширование максимальной/минимальной дроби до изменения набора. Ответ на количество дробей больше/меньше заданной может быть закеширован по нескольким последним запросам (то есть предполагаем, что если мы спросили, сколько дробей больше 1, то и в следующий раз нас снова заинтересует именно сравнение с единицей)
   * загрузка набора дробей из файла (формат файла задаёте вы сами)
* Определить класс "Полином" с коэффициентами в виде дроби. Полином должен иметь возможность задаваться через Набор дробей. Реализовать вычисление суммы полиномов


Лабораторная 3


Реализовать Каталог музыки.
Есть Артисты, они выпускают Альбомы, в которых содержатся Песни (или треки). Также есть музыкальные жанры. У жанров есть поджанры (например, Тяжелый рок - это поджанр Рока)
Кроме альбомов, в каталоге содержатся Сборники - в сборниках содержатся треки разных артистов, возможно, разных жанров.
Спроектировать и реализовать классовую модель такого Каталога, и сделать в нём небольшой поисковый движок. Например, чтобы можно было найти все альбомы и сборники, содержащие треки жанра Рок, вышедшие в 2017 году (при этом должны найтись и альбомы жанра Тяжелый рок, как поджанра Рока). Движок должен уметь искать а) артистов, б) альбомы и сборники, в) песни по ряду критериев (критерии определите сами) Для реализации вам нужно продумать, какими свойствами должен обладать тот или иной объект (например, у песни точно есть название). Кроме того, можно задать некоторые ограничения для упрощения работы. Я приведу примеры таких ограничений (вы можете им следовать или нет, по желанию)
* Вы можете задать определенный жанр (или жанры) Артисту и считать, что все его треки сделаны в этом жанре. Или же считать, что каждый трек может иметь свой жанр (или альбом, или ещё как-то)
* Считаем, что артисты не могут выпустить альбом вместе (один альбом - один артист)
* Можно считать, что трек не существует вне альбома. То есть если трек выпущен, он должен присутствовать хотя бы в одном альбоме, даже если там этот трек - единственный (такие альбомы называются синглами)
* Жанры можно представить в виде дерева (в этом случае у каждого поджанра может быть только один предок). Но можно реализовать и другие отношения (например, считать, что жанр Поп-рок имеет родительские жанры Рок и Поп). Так или иначе, нужно реализовать минимум два уровня жанров (то есть базовые родительские, и поджанры)
* Можем считать, что Сборник - это произвольный набор треков из вышедших ранее альбомов (разных исполнителей)
Кроме этих ограничений вы можете придумать свои, если вы посчитаете их необходимыми (но помните, что преподаватель может вас попросить их ослабить)
Общие пожелания по реализации:
* Пожалуйста, не выдумывайте искусственных идентификаторов объектов, работайте с объектами напрямую. Помните, что переменная хранит только ссылку на существующий где-то в памяти объект, то есть по сути она хранит его идентификатор.
* Поисковый движок можно сделать двумя способами - либо набором конкретных методов, либо также написать его в объектном стиле, сделав Конструктор запросов
* Если вы хотите что-то добавить в объектную модель, или добавить свои ограничения, но в чем-то не уверены, спросите преподавателя. Он с радостью выслушает любые ваши идеи. То же самое касается вопросов по реализации (если вы зашли в тупик)